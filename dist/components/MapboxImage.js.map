{"version":3,"file":"MapboxImage.js","sources":["../../src/components/MapboxImage.vue"],"sourcesContent":["<template>\n  <div :id=\"id\">\n    <slot v-if=\"isReady\" />\n  </div>\n</template>\n\n<script>\n  import { injectMap } from '../mixins/provide-inject-map';\n\n  export default {\n    name: 'MapboxImage',\n    mixins: [ injectMap() ],\n    props: {\n      /**\n       * The ID of the image\n       * @see  https://docs.mapbox.com/mapbox-gl-js/api/#map#addimage\n       * @type {String}\n       */\n      id: {\n        type: String,\n        required: true,\n      },\n      /**\n       * The image as String, an HTMLImageElement, ImageData, or object with\n       * width, height, and data properties with the same format as ImageData.\n       * @see  https://docs.mapbox.com/mapbox-gl-js/api/#map#addimage\n       * @type {String|HTMLImageElement|ImageData|Object}\n       */\n      src: {\n        type: [ String, HTMLImageElement, ImageData, Object ],\n        required: true,\n      },\n      /**\n       * The options object for the image to add\n       * @see  https://docs.mapbox.com/mapbox-gl-js/api/#map#addimage\n       * @type {Object}\n       */\n      options: {\n        type: Object,\n        default: () => ({ pixelRatio: 1, sdf: false }),\n      },\n    },\n    data() {\n      return {\n        isReady: false,\n      };\n    },\n    watch: {\n      src: {\n        handler(newValue) {\n          this.map.updateImage(this.id, newValue);\n        },\n        deep: true,\n      },\n    },\n    async mounted() {\n      const { id, src, options } = this;\n\n      // If source is not a string, we don't need to load the image and we can\n      // add it to the map directly.\n      if (typeof src !== 'string') {\n        this.map.addImage(id, src, options);\n        this.$emit('add', { id, src, options });\n        this.isReady = true;\n        return;\n      }\n\n      const image = await this.loadImage(src);\n      this.map.addImage(id, image, options);\n      this.$emit('add', { id, src: image, options });\n      this.isReady = true;\n    },\n    destroyed() {\n      if (this.map.hasImage(this.id)) {\n        this.map.removeImage(this.id);\n      }\n    },\n    methods: {\n      /**\n       * Load the given image with the Mapbox `loadImage` method\n       *\n       * @param  {String}  src The source URL for the image\n       * @return {Promise}     A promise which will resolve on load\n       */\n      async loadImage(src) {\n        return new Promise((resolve, reject) => {\n          this.map.loadImage(src, (err, data) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve(data);\n          });\n        });\n      },\n    },\n  };\n</script>\n"],"names":[],"mappings":";;;;;AASA;;;;;AAKA;AACA;AACA;AACA;;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;AAMA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA1EA;;;AAPA,2BAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}