{"version":3,"file":"MapboxGeolocateControl.js","sources":["../../src/components/MapboxGeolocateControl.vue"],"sourcesContent":["<template>\n  <div />\n</template>\n\n<script>\n  import maplibre from 'maplibre-gl';\n  import { injectMap } from '../mixins/provide-inject-map';\n  import bindProps from '../utils/bind-props';\n  import { bindEvents, unbindEvents } from '../utils/bind-events';\n\n  if (!maplibre) {\n    throw new Error('mapboxgl is not installed.');\n  }\n\n  /**\n   * Component's props definition, we need to declare it outside the component\n   * to be able to test the default values and the types.\n   * @see https://docs.mapbox.com/mapbox-gl-js/api/#geolocatecontrol\n   * @type {Object}\n   */\n  const props = {\n    positionOptions: {\n      type: Object,\n      default: () => ({ enableHighAccuracy: false, timeout: 6000 }),\n    },\n    fitBoundsOptions: {\n      type: Object,\n      default: () => ({ maxZoom: 15 }),\n    },\n    trackUserLocation: {\n      type: Boolean,\n      default: false,\n    },\n    showAccuracyCircle: {\n      type: Boolean,\n      default: true,\n    },\n    showUserLocation: {\n      type: Boolean,\n      default: true,\n    },\n    position: {\n      type: String,\n      default: 'top-right',\n      bind: false,\n    },\n  };\n\n  /**\n   * All geolocationControl events which will be mapped/bounded to the component\n   * @see https://docs.mapbox.com/mapbox-gl-js/api/#geolocatecontrol.event:trackuserlocationend\n   * @type {Array}\n   */\n  const events = [\n    'trackuserlocationend',\n    'error',\n    'geolocate',\n    'outofmaxbounds',\n    'trackuserlocationstart',\n  ];\n\n  export default {\n    name: 'MapboxGeolocateControl',\n    mixins: [ injectMap() ],\n    props,\n    mounted() {\n      this.control = new maplibre.GeolocateControl(this.$props);\n\n      // Bind props and events\n      bindProps(this, this.control, props);\n      bindEvents(this, this.control, events);\n\n      // Add GeolocationControl to the map\n      this.map.addControl(this.control, this.position);\n    },\n    destroyed() {\n      if (this.control) {\n        unbindEvents(this, this.control, events);\n        this.map.removeControl(this.control);\n      }\n    },\n  };\n</script>\n"],"names":[],"mappings":";;;;;;;;;AAUA,aAAA;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAA;AA4BA;AACA;AACA;AACA;AACA;;AACA,uGAAA;AAQA;;;;;;;;;;;;;;;;;;CAAA;;;AA3DA,2BAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}