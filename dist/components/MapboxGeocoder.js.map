{"version":3,"file":"MapboxGeocoder.js","sources":["../../src/components/MapboxGeocoder.vue"],"sourcesContent":["<template>\n  <div />\n</template>\n\n<script>\n  import maplibre from 'maplibre-gl';\n  import MapboxGeocoder from '@maplibre/maplibre-gl-geocoder';\n  import { injectMap } from '../mixins/provide-inject-map';\n  import { bindEvents, unbindEvents } from '../utils/bind-events';\n\n  if (!maplibre) {\n    throw new Error('mapboxgl is not installed.');\n  }\n\n  if (!MapboxGeocoder) {\n    throw new Error('MapboxGeocoder is not installed.');\n  }\n\n  /**\n   ** Component's props definition, we need to declare it outside the component\n   * to be able to test the default values and the types.\n   * @see https://github.com/mapbox/mapbox-gl-geocoder/blob/master/API.md#parameters\n   * @type {object}\n   */\n  const props = {\n    accessToken: {\n      type: String,\n      default: 'no-token',\n    },\n    zoom: {\n      type: Number,\n      default: () => 16,\n    },\n    flyTo: {\n      type: [ Boolean, Object ],\n      default: () => true,\n    },\n    placeholder: {\n      type: String,\n      default: () => 'Search',\n    },\n    proximity: {\n      type: Object,\n      default: () => {},\n    },\n    trackProximity: {\n      type: Boolean,\n      default: () => true,\n    },\n    collapsed: {\n      type: Boolean,\n      default: () => false,\n    },\n    clearAndBlurOnEsc: {\n      type: Boolean,\n      default: () => false,\n    },\n    clearOnBlur: {\n      type: Boolean,\n      default: () => false,\n    },\n    bbox: {\n      type: Array,\n      default: () => [],\n    },\n    countries: {\n      type: String,\n      default: () => '',\n    },\n    types: {\n      type: String,\n      default: () => '',\n    },\n    minLength: {\n      type: Number,\n      default: () => 2,\n    },\n    limit: {\n      type: Number,\n      default: () => 5,\n    },\n    language: {\n      type: String,\n    },\n    filter: {\n      type: Function,\n    },\n    localGeocoder: {\n      type: Function,\n    },\n    reverseMode: {\n      type: String,\n      default: () => 'distance',\n    },\n    reverseGeocode: {\n      type: Boolean,\n      default: () => false,\n    },\n    enableEventLogging: {\n      type: Boolean,\n      default: () => false,\n    },\n    marker: {\n      type: Boolean,\n      default: () => true,\n    },\n    render: {\n      type: Function,\n    },\n    getItemValue: {\n      type: Function,\n      default: (item) => item.place_name,\n    },\n    mode: {\n      type: String,\n      default: () => 'mapbox.places',\n    },\n    localGeocoderOnly: {\n      type: Boolean,\n      default: () => false,\n    },\n  };\n\n  /**\n   * All Map events which will be mapped/bounded to the component\n   * @see  https://github.com/mapbox/mapbox-gl-geocoder/blob/master/API.md#on\n   * @type {Array}\n   */\n  const events = [ 'loading', 'results', 'result', 'error' ];\n\n  export default {\n    name: 'MapboxGeocoder',\n    mixins: [ injectMap() ],\n    props,\n    mounted() {\n      const { accessToken, ...$props } = this.$props;\n\n      // Delete the `reverseMode` property if we are not reverse geocoding as it is not supported by\n      // the Mapbox SDK.\n      //\n      // The `reverseMode` option can not be supported yet as it is conditionned by the search\n      // query format following a specific regex:\n      //\n      // ```js\n      //  /(-?\\d+\\.?\\d*)[, ]+(-?\\d+\\.?\\d*)[ ]*$/.test(searchInput)\n      // ```\n      //\n      // @todo use the same regex as the mapbox-gl-geocoder lib or open an issue\n      //\n      // @see https://github.com/mapbox/mapbox-sdk-js/blob/main/services/geocoding.js (92-104)\n      // @see https://github.com/mapbox/mapbox-sdk-js/blob/main/services/geocoding.js (161-172)\n      // @see https://github.com/mapbox/mapbox-gl-geocoder/blob/master/lib/index.js (437-458)\n      // eslint-disable-next-line no-constant-condition\n      if (!$props.reverseGeocode || true) {\n        delete $props.reverseMode;\n      }\n\n      this.control = new MapboxGeocoder({\n        accessToken: maplibre.accessToken || accessToken,\n        maplibre,\n        ...$props,\n      });\n\n      // Bind events\n      bindEvents(this, this.control, events);\n      this.$emit('mb-created', this.control);\n\n      this.control.addTo(this.map || this.$el);\n    },\n    destroyed() {\n      unbindEvents(this, this.control);\n      if (this.map) {\n        this.map.removeControl(this.control);\n      }\n    },\n  };\n</script>\n"],"names":[],"mappings":";;;;;;;;;AAUA,aAAA;;;;AAIA,mBAAA;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAA;AAmGA;AACA;AACA;AACA;AACA;;AACA,sDAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAA;;;AAhIA,2BAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}