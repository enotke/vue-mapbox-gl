{"version":3,"file":"bind-events.js","sources":["../../src/utils/bind-events.js"],"sourcesContent":["/**\n * Map a mapbox element's events to the given vue element\n *\n * @param  {Vue}    vueElement    The Vue component in question\n * @param  {Mixed}  mapboxElement The Mapbox element bound to the component\n * @param  {Array}  events        The events to map\n * @param  {String} layerId       The layer on which the events are delegated\n * @return {Array}                The list of event/handler pair bounded\n */\nexport function bindEvents(vueElement, mapboxElement, events = [], layerId = null) {\n  const { $listeners: vueEvents } = vueElement;\n  // eslint-disable-next-line no-param-reassign\n  vueElement.$$events = Object.keys(vueEvents).reduce(($$events, vueEvent) => {\n    const originalEvent = vueEvent.replace(/^mb-/, '');\n    if (!events.includes(originalEvent)) {\n      return $$events;\n    }\n\n    const handler = (...payload) => {\n      vueElement.$emit(vueEvent, ...payload);\n    };\n\n    // If layerId is not null, all events must be\n    // delegated from the map to the given layerId\n    if (layerId) {\n      mapboxElement.on(originalEvent, layerId, handler);\n    } else {\n      mapboxElement.on(originalEvent, handler);\n    }\n\n    $$events.push([originalEvent, handler]);\n\n    return $$events;\n  }, []);\n}\n\n/**\n * Unbind events from the map element\n *\n * @param  {Mixed} mapboxElement The Mapbox element which needs unbinding\n * @param  {Array}  handlers     The list of event/handler pair to unbind\n * @param  {String} layerId      The layer on which the events where delegated\n * @return {void}\n */\nexport function unbindEvents(vueElement, mapboxElement, layerId = null) {\n  vueElement.$$events.forEach(([event, handler]) => {\n    // If layerId is not null, all events must be\n    // delegated from the map to the given layerId\n    if (layerId) {\n      mapboxElement.off(event, layerId, handler);\n    } else {\n      mapboxElement.off(event, handler);\n    }\n  });\n}\n"],"names":["bindEvents","vueElement","mapboxElement","events","layerId","vueEvents","$listeners","$$events","Object","keys","reduce","vueEvent","originalEvent","replace","includes","handler","payload","$emit","on","push","unbindEvents","forEach","event","off"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,UAAT,CAAoBC,UAApB,EAAgCC,aAAhC,EAA4E;AAAA,MAA7BC,MAA6B,uEAApB,EAAoB;AAAA,MAAhBC,OAAgB,uEAAN,IAAM;AACjF,MAAoBC,SAApB,GAAkCJ,UAAlC,CAAQK,UAAR,CADiF;;AAGjFL,EAAAA,UAAU,CAACM,QAAX,GAAsBC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,EAAuBK,MAAvB,CAA8B,UAACH,QAAD,EAAWI,QAAX,EAAwB;AAC1E,QAAMC,aAAa,GAAGD,QAAQ,CAACE,OAAT,CAAiB,MAAjB,EAAyB,EAAzB,CAAtB;;AACA,QAAI,CAACV,MAAM,CAACW,QAAP,CAAgBF,aAAhB,CAAL,EAAqC;AACnC,aAAOL,QAAP;AACD;;AAED,QAAMQ,OAAO,GAAG,SAAVA,OAAU,GAAgB;AAAA,wCAAZC,OAAY;AAAZA,QAAAA,OAAY;AAAA;;AAC9Bf,MAAAA,UAAU,CAACgB,KAAX,OAAAhB,UAAU,GAAOU,QAAP,SAAoBK,OAApB,EAAV;AACD,KAFD,CAN0E;AAW1E;;;AACA,QAAIZ,OAAJ,EAAa;AACXF,MAAAA,aAAa,CAACgB,EAAd,CAAiBN,aAAjB,EAAgCR,OAAhC,EAAyCW,OAAzC;AACD,KAFD,MAEO;AACLb,MAAAA,aAAa,CAACgB,EAAd,CAAiBN,aAAjB,EAAgCG,OAAhC;AACD;;AAEDR,IAAAA,QAAQ,CAACY,IAAT,CAAc,CAACP,aAAD,EAAgBG,OAAhB,CAAd;AAEA,WAAOR,QAAP;AACD,GArBqB,EAqBnB,EArBmB,CAAtB;AAsBD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASa,YAAT,CAAsBnB,UAAtB,EAAkCC,aAAlC,EAAiE;AAAA,MAAhBE,OAAgB,uEAAN,IAAM;AACtEH,EAAAA,UAAU,CAACM,QAAX,CAAoBc,OAApB,CAA4B,gBAAsB;AAAA;AAAA,QAApBC,KAAoB;AAAA,QAAbP,OAAa;;AAChD;AACA;AACA,QAAIX,OAAJ,EAAa;AACXF,MAAAA,aAAa,CAACqB,GAAd,CAAkBD,KAAlB,EAAyBlB,OAAzB,EAAkCW,OAAlC;AACD,KAFD,MAEO;AACLb,MAAAA,aAAa,CAACqB,GAAd,CAAkBD,KAAlB,EAAyBP,OAAzB;AACD;AACF,GARD;AASD;;;;"}